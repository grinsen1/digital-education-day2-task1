// ==================== –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ====================
let gameState = {
    currentStep: 'welcome',
    selectedPlatforms: new Set(),
    correctPlatforms: new Set([2, 4, 5, 7, 8]),
    attempts: 1,
    budgetData: [],
    totalBudget: 0,
    totalConversions: 0,
    totalReach: 0,
    isComplete: false,
    step1Complete: false,
    gameData: null
};

// ====== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON ======
async function loadGameData() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON...');
        const response = await fetch('/digital-education-day2-task1/final_full_mediaplan.json');

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        const data = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);

        gameState.gameData = data;
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

// ====== –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM ======
document.addEventListener('DOMContentLoaded', async function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    await initApp();
});

async function initApp() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    try {
        await loadGameData();
        setupEventListeners();
        showScreen('welcome-screen');
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
}

// ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ======
function setupEventListeners() {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    const startButton = document.getElementById('start-game');
    if (startButton) {
        startButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã!');
            showScreen('step1-screen');
            initializeStep1();
        });
    }

    const completeStep1Button = document.getElementById('complete-step1');
    if (completeStep1Button) {
        completeStep1Button.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 1');
            handleStep1Complete();
        });
    }

    const tryAgainButton = document.getElementById('try-again');
    if (tryAgainButton) {
        tryAgainButton.addEventListener('click', function(e) {
            e.preventDefault();
            handleTryAgain();
        });
    }

    const continueButton = document.getElementById('continue-to-step2');
    if (continueButton) {
        continueButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É 2...');
            showScreen('step2-screen');
            initializeStep2();
        });
    }

    const completeStep2Button = document.getElementById('complete-step2');
    if (completeStep2Button) {
        completeStep2Button.addEventListener('click', function(e) {
            e.preventDefault();
            handleStep2Complete();
        });
    }

    const restartButton = document.getElementById('restart-game');
    if (restartButton) {
        restartButton.addEventListener('click', function(e) {
            e.preventDefault();
            restartGame();
        });
    }
}

function showScreen(screenId) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
    try {
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => screen.classList.remove('active'));
        
        // ‚úÖ –î–û–ë–ê–í–¨–¢–ï: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —ç—Ç–∞–ø—É 2
        if (screenId === 'step2-screen') {
            console.log('üßπ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —ç—Ç–∞–ø–∞ 1 –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —ç—Ç–∞–ø—É 2');
            
            // –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —ç—Ç–∞–ø–∞ 1
            const step1TableBody = document.getElementById('mediaplan-table-body');
            if (step1TableBody) {
                step1TableBody.innerHTML = '';
                console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —ç—Ç–∞–ø–∞ 1 –æ—á–∏—â–µ–Ω–∞');
            }
            
            // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å data-platform-id —É–¥–∞–ª–µ–Ω—ã
            const allPlatformRows = document.querySelectorAll('tr[data-platform-id]');
            allPlatformRows.forEach(row => {
                console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É:', row.dataset.platformId);
                row.remove();
            });
        }
        
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.add('active');
            gameState.currentStep = screenId.replace('-screen', '');
            console.log('‚úì –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω:', screenId);
        } else {
            console.error('‚úó –¶–µ–ª–µ–≤–æ–π —ç–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenId);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞:', error);
    }
}

// ====== –≠–¢–ê–ü 1: –æ—Ç–±–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫ ======
function initializeStep1() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–ø–∞ 1...');
    if (!gameState.gameData) {
        console.error('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    try {
        const tableBody = document.getElementById('mediaplan-table-body');
        if (!tableBody) {
            console.error('–¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        tableBody.innerHTML = '';

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º step1
        const platforms = gameState.gameData.step1 || [];
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–æ—â–∞–¥–æ–∫:', platforms.length);

        platforms.forEach(platform => {
            const row = createMediaplanRow(platform);
            tableBody.appendChild(row);
        });

        updateStep1Button();
        updateAttemptsCounter();
        updateSelectionCount();
        console.log('‚úì –≠—Ç–∞–ø 1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å', platforms.length, '–ø–ª–æ—â–∞–¥–∫–∞–º–∏');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∞–ø–∞ 1:', error);
    }
}

function createMediaplanRow(platform) {
    const row = document.createElement('tr');
    row.dataset.platformId = platform.id;
    
    // –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ JSON
    row.innerHTML = `
        <td class="checkbox-col sticky-col">
            <input type="checkbox" class="mediaplan-checkbox" data-platform-id="${platform.id}">
        </td>
        <td class="number-col">${platform.id ?? '-'}</td>
        <td class="site-col">${platform.site ?? '-'}</td>
        <td class="age-col">${platform.age ?? '-'}</td>
        <td class="segments-col">${platform.segments ?? '-'}</td>
        <td class="format-col">${platform.format ?? '-'}</td>
        <td class="placement-col">${platform.placement_example ?? '-'}</td>
        <td class="unit-col">${platform.purchase_unit ?? '-'}</td>
        <td class="capacity-col">${platform.max_capacity?.toLocaleString() ?? '-'}</td>
        <td class="cost-col">${platform.cost_per_unit?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="budget-col">${platform.budget?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="shows-col">${platform.shows?.toLocaleString() ?? '-'}</td>
        <td class="frequency-col">${platform.frequency ?? '-'}</td>
        <td class="cpm-col">${platform.cpm?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="reach-col">${platform.reach?.toLocaleString() ?? '-'}</td>
        <td class="cpt-col">${platform.cpt?.toLocaleString() ?? '-'}</td>
        <td class="ctr-col">${platform.ctr ? (platform.ctr * 100).toFixed(2) + '%' : '-'}</td>
        <td class="clicks-col">${platform.clicks?.toLocaleString() ?? '-'}</td>
        <td class="cpc-col">${platform.cpc?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="views-col">${platform.views?.toLocaleString() ?? '-'}</td>
        <td class="vtr-col">${platform.vtr ? (platform.vtr * 100).toFixed(1) + '%' : '-'}</td>
        <td class="cpv-col">${platform.cpv?.toLocaleString() ?? '-'}</td>
        <td class="conversions-session-col">${platform.conversions_session?.toLocaleString() ?? '-'}</td>
        <td class="sessions-col">${platform.sessions?.toLocaleString() ?? '-'}</td>
        <td class="cr-successful-col">${platform.cr_successful ? (platform.cr_successful * 100).toFixed(2) + '%' : '-'}</td>
        <td class="conversions-successful-col">${platform.conversions_successful?.toLocaleString() ?? '-'}</td>
        <td class="cpa-successful-col">${platform.cpa_successful?.toLocaleString() ?? '-'} ‚ÇΩ</td>
    `;
    row.addEventListener('click', function(e) {
        if (e.target.type !== 'checkbox') {
            const checkbox = row.querySelector('.mediaplan-checkbox');
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                handlePlatformSelection(checkbox);
            }
        }
    });
    const checkbox = row.querySelector('.mediaplan-checkbox');
    if (checkbox) {
        checkbox.addEventListener('change', function(e) {
            e.stopPropagation();
            handlePlatformSelection(e.target);
        });
    }
    return row;
}

function handlePlatformSelection(checkbox) {
    const platformId = parseInt(checkbox.dataset.platformId);
    const row = checkbox.closest('tr');
    if (checkbox.checked) {
        gameState.selectedPlatforms.add(platformId);
        row.classList.add('selected');
    } else {
        gameState.selectedPlatforms.delete(platformId);
        row.classList.remove('selected');
    }
    updateStep1Button();
    updateSelectionCount();
    console.log('–í—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –í—ã–±—Ä–∞–Ω–æ:', Array.from(gameState.selectedPlatforms));
}

function updateStep1Button() {
    const button = document.getElementById('complete-step1');
    if (button) button.disabled = gameState.selectedPlatforms.size === 0;
}

function updateSelectionCount() {
    const counter = document.getElementById('selection-count');
    if (counter) counter.textContent = `–í—ã–±—Ä–∞–Ω–æ –ø–ª–æ—â–∞–¥–æ–∫: ${gameState.selectedPlatforms.size}`;
}

function updateAttemptsCounter() {
    const counter = document.getElementById('attempts-counter');
    if (counter) counter.textContent = gameState.attempts;
}

function handleStep1Complete() {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 1...');
    const results = showStep1Results();
    const feedbackSection = document.getElementById('feedback-section');
    if (feedbackSection) feedbackSection.classList.remove('hidden');
    const continueButton = document.getElementById('continue-to-step2');
    const tryAgainButton = document.getElementById('try-again');
    const selectedCorrectIds = Array.from(gameState.selectedPlatforms).filter(id =>
        gameState.correctPlatforms.has(id)
    );
    const selectedIncorrectIds = Array.from(gameState.selectedPlatforms).filter(id =>
        !gameState.correctPlatforms.has(id)
    );
    const isCorrectSelection = selectedCorrectIds.length === 5 && selectedIncorrectIds.length === 0;
    if (isCorrectSelection) {
        console.log('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
        gameState.step1Complete = true;
        if (continueButton) {
            continueButton.classList.remove('hidden');
            continueButton.style.display = 'inline-block';
        }
        if (tryAgainButton) tryAgainButton.classList.add('hidden');
    } else {
        console.log('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫. –ù—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.');
        gameState.step1Complete = false;
        if (continueButton) continueButton.classList.add('hidden');
        if (tryAgainButton) {
            tryAgainButton.classList.remove('hidden');
            tryAgainButton.style.display = 'inline-block';
        }
    }
}

function showStep1Results() {
    let selectedCorrectCount = 0;
    let selectedIncorrectCount = 0;
    if (!gameState.gameData) return { selectedCorrectCount: 0, selectedIncorrectCount: 0 };
    const platforms = gameState.gameData.step1 || [];
    platforms.forEach(platform => {
        const row = document.querySelector(`tr[data-platform-id="${platform.id}"]`);
        if (!row) return;
        const isSelected = gameState.selectedPlatforms.has(platform.id);
        const isCorrect = gameState.correctPlatforms.has(platform.id);
        row.classList.remove('correct', 'incorrect');
        if (isSelected) {
            if (isCorrect) {
                row.classList.add('correct');
                selectedCorrectCount++;
            } else {
                row.classList.add('incorrect');
                selectedIncorrectCount++;
            }
        }
    });
    showDetailedFeedback();
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${selectedCorrectCount} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ ${selectedIncorrectCount} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –≤—ã–±—Ä–∞–Ω–æ`);
    return { selectedCorrectCount, selectedIncorrectCount };
}

function showDetailedFeedback() {
    const feedbackResults = document.getElementById('feedback-results');
    if (!feedbackResults || !gameState.gameData) return;
    feedbackResults.innerHTML = '';
    const platforms = gameState.gameData.step1 || [];
    const selectedPlatforms = platforms.filter(platform =>
        gameState.selectedPlatforms.has(platform.id)
    );
    if (selectedPlatforms.length === 0) {
        feedbackResults.innerHTML = '<div class="feedback-item"><div class="feedback-text">–ü–ª–æ—â–∞–¥–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.</div></div>';
        return;
    }
    selectedPlatforms.forEach(platform => {
        const isCorrect = gameState.correctPlatforms.has(platform.id);
        const feedbackItem = document.createElement('div');
        feedbackItem.className = `feedback-item ${isCorrect ? 'correct' : 'incorrect'}`;
        const platformName = document.createElement('div');
        platformName.className = `feedback-platform ${isCorrect ? 'correct' : 'incorrect'}`;
        platformName.textContent = `${isCorrect ? '‚úÖ' : '‚ùå'} ${platform.site ?? '-'}`;
        const feedbackText = document.createElement('div');
        feedbackText.className = 'feedback-text';
        feedbackText.textContent = platform.feedback || (isCorrect ? '–ü–æ–∑–∏—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç, –±–µ—Ä–µ–º –≤ –ø–ª–∞–Ω' : '–ü–ª–æ—â–∞–¥–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏');
        feedbackItem.appendChild(platformName);
        feedbackItem.appendChild(feedbackText);
        feedbackResults.appendChild(feedbackItem);
    });
}

function handleTryAgain() {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–Ω–æ–≤–∞...');
    gameState.attempts++;
    gameState.selectedPlatforms.clear();
    gameState.step1Complete = false;
    const feedbackSection = document.getElementById('feedback-section');
    if (feedbackSection) feedbackSection.classList.add('hidden');
    document.querySelectorAll('tr[data-platform-id]').forEach(row => {
        row.classList.remove('selected', 'correct', 'incorrect');
        const checkbox = row.querySelector('.mediaplan-checkbox');
        if (checkbox) checkbox.checked = false;
    });
    updateStep1Button();
    updateAttemptsCounter();
    updateSelectionCount();
}

// ====== –≠–¢–ê–ü 2: –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ ======
function initializeStep2() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–ø–∞ 2...');
    if (!gameState.step1Complete || !gameState.gameData) {
        console.error('–≠—Ç–∞–ø 1 –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—Ç –∫ —ç—Ç–∞–ø—É 1.');
        showScreen('step1-screen');
        return;
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º step2
    const platforms = gameState.gameData.step2 || [];
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∞—á–µ, –µ—Å–ª–∏ –≤ step2 —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    gameState.budgetData = platforms.map(platform => ({
        ...platform,
        current_quantity: platform.current_quantity ?? platform.take_quantity ?? 0
    }));
    createBudgetTable(gameState.budgetData);
    updateBudgetDisplay();
    console.log('‚úì –≠—Ç–∞–ø 2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å', gameState.budgetData.length, '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∞–º–∏');
}

function createBudgetTable(platforms) {
    console.log('üèóÔ∏è createBudgetTable –≤—ã–∑–≤–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ 2');
    const tableBody = document.getElementById('budget-table-body');
    if (!tableBody) {
        console.error('–¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    tableBody.innerHTML = '';
    if (platforms.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = '<td colspan="28" style="text-align: center; padding: 40px; color: var(--color-text-secondary);">–ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞</td>';
        tableBody.appendChild(row);
        return;
    }
    platforms.forEach(platform => {
        console.log('üî® –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id, '—á–µ—Ä–µ–∑ createBudgetRow');
        const row = createBudgetRow(platform);
        
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ DOM –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
        tableBody.appendChild(row);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –≤ DOM
        const addedRow = document.querySelector(`tr[data-platform-id="${platform.id}"]`);
        if (addedRow) {
            console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DOM –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
            const quantityInputInDOM = addedRow.querySelector('.quantity-input');
            const totalCostInDOM = addedRow.querySelector('.total-cost-col');
            
            console.log('üîç –ü–†–û–í–ï–†–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –í DOM:');
            console.log('   quantity-input –≤ DOM:', quantityInputInDOM ? '‚úÖ –µ—Å—Ç—å' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            console.log('   total-cost-col –≤ DOM:', totalCostInDOM ? '‚úÖ –µ—Å—Ç—å' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            console.error('‚ùå –°—Ç—Ä–æ–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
        }
    });
    
    console.log('üèÅ createBudgetTable –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}


function createBudgetRow(platform) {
    console.log('üî® createBudgetRow START –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
    console.log('üî® Platform data:', platform);
    
    const row = document.createElement('tr');
    row.dataset.platformId = platform.id;
    
    // –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è + input –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    row.innerHTML = `
        <td class="checkbox-col sticky-col"><input type="checkbox" checked disabled></td>
        <td class="number-col">${platform.id ?? '-'}</td>
        <td class="site-col">${platform.platform ?? '-'}</td>
        <td class="age-col">${platform.age ?? '-'}</td>
        <td class="segments-col">${platform.segments ?? '-'}</td>
        <td class="format-col">${platform.format ?? '-'}</td>
        <td class="placement-col">${platform.placement_example ?? '-'}</td>
        <td class="unit-col">${platform.purchase_unit ?? '-'}</td>
        <td class="capacity-col">${platform.max_capacity?.toLocaleString() ?? '-'}</td>
        <td class="quantity-col">
            <div class="quantity-controls">
                <button class="quantity-btn" data-action="decrease" data-platform-id="${platform.id}">‚àí</button>
                <input type="number"
                       class="quantity-input"
                       data-platform-id="${platform.id}"
                       value="${platform.current_quantity ?? 0}"
                       min="0"
                       max="${platform.max_capacity ?? 0}"
                       step="100">
                <button class="quantity-btn" data-action="increase" data-platform-id="${platform.id}">+</button>
            </div>
        </td>
        <td class="cost-col">${platform.cost_per_unit?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="total-cost-col">${((platform.current_quantity ?? 0) * (platform.cost_per_unit ?? 0)).toLocaleString()} ‚ÇΩ</td>
        <td class="budget-col">${platform.budget?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="shows-col">${platform.shows?.toLocaleString() ?? '-'}</td>
        <td class="frequency-col">${platform.frequency ?? '-'}</td>
        <td class="cpm-col">${platform.cpm?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="reach-col">${platform.reach?.toLocaleString() ?? '-'}</td>
        <td class="cpt-col">${platform.cpt?.toLocaleString() ?? '-'}</td>
        <td class="ctr-col">${platform.ctr ? (platform.ctr * 100).toFixed(2) + '%' : '-'}</td>
        <td class="clicks-col">${platform.clicks?.toLocaleString() ?? '-'}</td>
        <td class="cpc-col">${platform.cpc?.toLocaleString() ?? '-'} ‚ÇΩ</td>
        <td class="views-col">${platform.views?.toLocaleString() ?? '-'}</td>
        <td class="vtr-col">${platform.vtr ? (platform.vtr * 100).toFixed(1) + '%' : '-'}</td>
        <td class="cpv-col">${platform.cpv?.toLocaleString() ?? '-'}</td>
        <td class="conversions-session-col">${platform.conversions_session?.toLocaleString() ?? '-'}</td>
        <td class="sessions-col">${platform.sessions?.toLocaleString() ?? '-'}</td>
        <td class="cr-successful-col">${platform.cr_successful ? (platform.cr_successful * 100).toFixed(2) + '%' : '-'}</td>
        <td class="conversions-successful-col">${platform.conversions_successful?.toLocaleString() ?? '-'}</td>
        <td class="cpa-successful-col">${platform.cpa_successful?.toLocaleString() ?? '-'} ‚ÇΩ</td>
    `;
    
    console.log('üìÑ HTML —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:');
    console.log(row.innerHTML);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const quantityInput = row.querySelector('.quantity-input');
    const totalCostCol = row.querySelector('.total-cost-col');
    const quantityCol = row.querySelector('.quantity-col');
    
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –í –ù–û–í–û–ô –°–¢–†–û–ö–ï:');
    console.log('   quantity-col:', quantityCol ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('   quantity-input:', quantityInput ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('   total-cost-col:', totalCostCol ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    if (quantityInput) {
        console.log('üìù Quantity input value:', quantityInput.value);
        console.log('üìù Quantity input data-platform-id:', quantityInput.dataset.platformId);
    }
    
    if (totalCostCol) {
        console.log('üí∞ Total cost —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', totalCostCol.textContent);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
    const decreaseBtn = row.querySelector('[data-action="decrease"]');
    const increaseBtn = row.querySelector('[data-action="increase"]');
    const input = row.querySelector('.quantity-input');

    console.log('üîç –ü–û–ò–°–ö –ö–ù–û–ü–û–ö –ò INPUT:');
    console.log('   decreaseBtn:', decreaseBtn ? '‚úÖ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('   increaseBtn:', increaseBtn ? '‚úÖ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('   input:', input ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (decreaseBtn) {
        console.log('üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ decrease –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
        decreaseBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîΩ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ decrease –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
            changeQuantity(platform.id, -100);
        });
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ decrease - –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (increaseBtn) {
        console.log('üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ increase –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
        increaseBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîº –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ increase –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
            changeQuantity(platform.id, 100);
        });
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ increase - –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (input) {
        console.log('üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ input –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
        input.addEventListener('input', function(e) {
            console.log('üìù INPUT CHANGED –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', e.target.value);
            
            let val = parseInt(e.target.value);
            if (isNaN(val)) val = 0;
            val = Math.max(0, Math.min(platform.max_capacity ?? 0, val));
            platform.current_quantity = val;
            if (e.target.value !== val.toString()) {
                e.target.value = val;
            }
            
            console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º platform.current_quantity –Ω–∞:', val);
            console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º updateRowDisplay –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
            
            updateRowDisplay(platform.id);
            updateBudgetDisplay();
        });
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ input - –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log('‚úÖ createBudgetRow END –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.id);
    console.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å data-platform-id:', row.dataset.platformId);
    
    return row;
}


function changeQuantity(platformId, delta) {
    const platform = gameState.budgetData.find(p => p.id === platformId);
    if (!platform) return;
    platform.current_quantity = Math.max(0, Math.min(platform.max_capacity ?? 0, (platform.current_quantity ?? 0) + delta));
    document.querySelectorAll('.quantity-input').forEach(input => {
        if (parseInt(input.dataset.platformId) === platformId) {
            input.value = platform.current_quantity;
        }
    });
    updateRowDisplay(platformId);
    updateBudgetDisplay();
}

function updateRowDisplay(platformId) {
    console.log('=== updateRowDisplay START ===');
    
    const platform = gameState.budgetData.find(p => p.id === platformId);
    if (!platform) {
        console.error('‚ùå Platform –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –¢–û–õ–¨–ö–û –≤ —Ç–∞–±–ª–∏—Ü–µ —ç—Ç–∞–ø–∞ 2
    const budgetTableBody = document.getElementById('budget-table-body');
    if (!budgetTableBody) {
        console.error('‚ùå budget-table-body –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const row = budgetTableBody.querySelector(`tr[data-platform-id="${platformId}"]`);
    if (!row) {
        console.error('‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —ç—Ç–∞–ø–∞ 2');
        return;
    }
    
    console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç—ã...');
    
    // === –ë–ê–ó–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ===
    const currentQuantity = platform.current_quantity ?? 0;
    const costPerUnit = platform.cost_per_unit ?? 0;
    const frequency = platform.frequency ?? 1;
    const ctr = platform.ctr ?? 0;
    const vtr = platform.vtr ?? 0;
    const conversionsSession = platform.conversions_session ?? 0;
    const crSuccessful = platform.cr_successful ?? 0;
    
    // === –†–ê–°–ß–ï–¢–´ ===
    
    // 1. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalCost = currentQuantity * costPerUnit;
    
    // 2. –ü–æ–∫–∞–∑—ã = –ë–µ—Ä–µ–º –≤ –ú–ü * 1000
    const shows = currentQuantity * 1000;
    
    // 3. –û—Ö–≤–∞—Ç = –ü–æ–∫–∞–∑—ã / –ß–∞—Å—Ç–æ—Ç–∞
    const reach = frequency > 0 ? Math.round(shows / frequency) : 0;
    
    // 4. –ö–ª–∏–∫–∏ = –ü–æ–∫–∞–∑—ã * CTR
    const clicks = Math.round(shows * ctr);
    
    // 5. CPC = –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å / –ö–ª–∏–∫–∏
    const cpc = clicks > 0 ? Math.round(totalCost / clicks) : 0;
    
    // 6. –ü—Ä–æ—Å–º–æ—Ç—Ä—ã = –ü–æ–∫–∞–∑—ã * VTR
    const views = Math.round(shows * vtr);
    
    // 7. –°–µ—Å—Å–∏–∏ = –ö–ª–∏–∫–∏ * –ö–æ–Ω–≤. –≤ —Å–µ—Å—Å–∏–∏
    const sessions = Math.round(clicks * conversionsSession);
    
    // 8. –ö–æ–Ω–≤ –≤ —É—Å–ø–µ—Ö = –ö–ª–∏–∫–∏ * CR –≤ —É—Å–ø–µ—Ö
    const conversionsSuccessful = clicks * crSuccessful;
    
    // 9. CPA –≤ –∫–æ–Ω–≤. = –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å / –ö–æ–Ω–≤ –≤ —É—Å–ø–µ—Ö
    const cpaSuccessful = conversionsSuccessful > 0 ? Math.round(totalCost / conversionsSuccessful) : 0;
    
    console.log('üìä –†–ê–°–ß–ï–¢–´:');
    console.log('  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', currentQuantity);
    console.log('  –ü–æ–∫–∞–∑—ã:', shows.toLocaleString());
    console.log('  –û—Ö–≤–∞—Ç:', reach.toLocaleString());
    console.log('  –ö–ª–∏–∫–∏:', clicks.toLocaleString());
    console.log('  CPC:', cpc.toLocaleString());
    console.log('  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã:', views.toLocaleString());
    console.log('  –°–µ—Å—Å–∏–∏:', sessions.toLocaleString());
    console.log('  –ö–æ–Ω–≤ –≤ —É—Å–ø–µ—Ö:', conversionsSuccessful.toFixed(2));
    console.log('  CPA —É—Å–ø–µ—à–Ω—ã–π:', cpaSuccessful.toLocaleString());
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï DOM ===
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (input)
    const quantityInput = row.querySelector('.quantity-input');
    if (quantityInput) {
        quantityInput.value = currentQuantity;
    }
    
    // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalCostDisplay = row.querySelector('.total-cost-col');
    if (totalCostDisplay) {
        totalCostDisplay.textContent = totalCost.toLocaleString() + ' ‚ÇΩ';
        console.log('‚úÖ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ü–æ–∫–∞–∑—ã
    const showsDisplay = row.querySelector('.shows-col');
    if (showsDisplay) {
        showsDisplay.textContent = shows.toLocaleString();
        console.log('‚úÖ –ü–æ–∫–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // –û—Ö–≤–∞—Ç
    const reachDisplay = row.querySelector('.reach-col');
    if (reachDisplay) {
        reachDisplay.textContent = reach.toLocaleString();
        console.log('‚úÖ –û—Ö–≤–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ö–ª–∏–∫–∏
    const clicksDisplay = row.querySelector('.clicks-col');
    if (clicksDisplay) {
        clicksDisplay.textContent = clicks.toLocaleString();
        console.log('‚úÖ –ö–ª–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // CPC
    const cpcDisplay = row.querySelector('.cpc-col');
    if (cpcDisplay) {
        cpcDisplay.textContent = cpc.toLocaleString() + ' ‚ÇΩ';
        console.log('‚úÖ CPC –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
    const viewsDisplay = row.querySelector('.views-col');
    if (viewsDisplay) {
        viewsDisplay.textContent = views.toLocaleString();
        console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // –°–µ—Å—Å–∏–∏
    const sessionsDisplay = row.querySelector('.sessions-col');
    if (sessionsDisplay) {
        sessionsDisplay.textContent = sessions.toLocaleString();
        console.log('‚úÖ –°–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑
    const conversionsSuccessfulDisplay = row.querySelector('.conversions-successful-col');
    if (conversionsSuccessfulDisplay) {
        conversionsSuccessfulDisplay.textContent = conversionsSuccessful.toFixed(2);
        console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ —É—Å–ø–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // CPA –≤ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑
    const cpaSuccessfulDisplay = row.querySelector('.cpa-successful-col');
    if (cpaSuccessfulDisplay) {
        cpaSuccessfulDisplay.textContent = cpaSuccessful.toLocaleString() + ' ‚ÇΩ';
        console.log('‚úÖ CPA —É—Å–ø–µ—à–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö ===
    const decreaseBtn = row.querySelector('[data-action="decrease"]');
    const increaseBtn = row.querySelector('[data-action="increase"]');
    
    if (decreaseBtn) {
        decreaseBtn.disabled = currentQuantity === 0;
    }
    
    if (increaseBtn) {
        increaseBtn.disabled = currentQuantity >= (platform.max_capacity ?? 0);
    }
    
    console.log('üéâ –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('=== updateRowDisplay END ===');
}

function updateBudgetDisplay() {
    gameState.totalBudget = gameState.budgetData.reduce((sum, platform) =>
        sum + ((platform.current_quantity ?? 0) * (platform.cost_per_unit ?? 0)), 0
    );
    gameState.totalConversions = gameState.budgetData.reduce((sum, platform) =>
        sum + ((platform.current_quantity ?? 0) * (platform.cr_successful ?? 0)), 0
    );
    gameState.totalReach = gameState.budgetData.reduce((sum, platform) =>
        sum + ((platform.current_quantity ?? 0) > 0 ? (platform.reach ?? 0) : 0), 0
    );
    const budgetElement = document.getElementById('current-budget');
    if (budgetElement) {
        budgetElement.textContent = gameState.totalBudget.toLocaleString() + ' ‚ÇΩ';
    }
    const reachElement = document.getElementById('current-reach');
    if (reachElement) {
        reachElement.textContent = gameState.totalReach.toLocaleString();
    }
    const progressFill = document.getElementById('budget-progress-fill');
    const budgetPercentage = document.getElementById('budget-percentage');
    const budgetLimit = gameState.gameData.budget_limit ?? 2000000;
    const percentage = Math.min(100, (gameState.totalBudget / budgetLimit) * 100);
    if (progressFill) {
        progressFill.style.width = percentage + '%';
        if (gameState.totalBudget > budgetLimit) {
            progressFill.classList.add('over-limit');
        } else {
            progressFill.classList.remove('over-limit');
        }
    }
    if (budgetPercentage) {
        budgetPercentage.textContent = Math.round(percentage) + '%';
    }
    const warningMessage = document.getElementById('budget-warning');
    const completeButton = document.getElementById('complete-step2');
    const budgetOverview = document.querySelector('.budget-overview');
    if (gameState.totalBudget > budgetLimit) {
        if (budgetElement) budgetElement.classList.add('over-limit');
        if (budgetOverview) budgetOverview.classList.add('over-limit');
        if (warningMessage) warningMessage.classList.remove('hidden');
        if (completeButton) completeButton.disabled = true;
    } else {
        if (budgetElement) budgetElement.classList.remove('over-limit');
        if (budgetOverview) budgetOverview.classList.remove('over-limit');
        if (warningMessage) warningMessage.classList.add('hidden');
        if (completeButton) completeButton.disabled = gameState.totalBudget === 0;
    }
    const cpaElement = document.getElementById('current-cpa');
    if (cpaElement) {
        const cpa = gameState.totalConversions > 0 ? gameState.totalBudget / gameState.totalConversions : 0;
        cpaElement.textContent = Math.round(cpa).toLocaleString() + ' ‚ÇΩ';
    }
    const conversionsElement = document.getElementById('total-conversions');
    if (conversionsElement) {
        conversionsElement.textContent = Math.round(gameState.totalConversions).toLocaleString();
    }
}

function handleStep2Complete() {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 2...');
    gameState.isComplete = true;
    showScreen('results-screen');
    showResults();
}

function showResults() {
    const summaryElement = document.getElementById('results-summary');
    const activePlatforms = gameState.budgetData.filter(platform => (platform.current_quantity ?? 0) > 0).length;
    const totalUnits = gameState.budgetData.reduce((sum, platform) => sum + (platform.current_quantity ?? 0), 0);
    const cpa = gameState.totalConversions > 0 ? gameState.totalBudget / gameState.totalConversions : 0;
    if (summaryElement) {
        summaryElement.innerHTML = `
            <div class="summary-item"><span>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫:</span><span>${activePlatforms}</span></div>
            <div class="summary-item"><span>–û–±—â–∏–π –æ—Ö–≤–∞—Ç:</span><span>${gameState.totalReach.toLocaleString()}</span></div>
            <div class="summary-item"><span>–û–±—â–∏–π –æ–±—ä–µ–º –ø–æ–∫–∞–∑–æ–≤:</span><span>${totalUnits.toLocaleString()}</span></div>
            <div class="summary-item"><span>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</span><span>${Math.round(gameState.totalConversions).toLocaleString()}</span></div>
            <div class="summary-item"><span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç:</span><span>${gameState.totalBudget.toLocaleString()} ‚ÇΩ</span></div>
            <div class="summary-item"><span>CPA (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏):</span><span>${Math.round(cpa).toLocaleString()} ‚ÇΩ</span></div>
        `;
    }
    const efficiencyElement = document.getElementById('efficiency-rating');
    let efficiency = calculateEfficiency(cpa, gameState.totalBudget, gameState.gameData.budget_limit ?? 2000000);
    let efficiencyText = getEfficiencyText(efficiency);
    if (efficiencyElement) {
        efficiencyElement.innerHTML = `
            <h3>–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞</h3>
            <div class="efficiency-score">${efficiency}/10</div>
            <div class="efficiency-description">${efficiencyText}</div>
        `;
    }
}

/* ----------  calculateEfficiency()  ---------- */
/* –æ—Ç–¥–∞—ë—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1‚Äì10                       */
function calculateEfficiency(cpa, budget, budgetLimit) {
  let score = 0;                                   // —Å—Ç–∞—Ä—Ç ‚Äî 0

  /* === 1. –û—Å–≤–æ–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ (0‚Äì3 –±–∞–ª–ª–∞) === */
  const usage = budget / budgetLimit;              // –¥–æ–ª—è –ª–∏–º–∏—Ç–∞
  if (usage >= 0.99)          score += 3;          // 99‚Äì100 %
  else if (usage >= 0.90)     score += 2;          // 90‚Äì98,99 %
  else if (usage >= 0.80)     score += 1;          // 80‚Äì89,99 %
  // <80 % ‚Äî 0 –±–∞–ª–ª–æ–≤

  /* === 2. CPA (‚Äì2‚Ä¶+6 –±–∞–ª–ª–æ–≤) ===
       –ü–æ—Ä–æ–≥–∏ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã (‚âà24 k ‚ÇΩ)      */
  if (cpa <= 25000)           score += 6;          // —Ç–æ–ø-—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  else if (cpa <= 40000)      score += 4;          // –Ω–æ—Ä–º
  else if (cpa <= 60000)      score += 2;          // —Ç–µ—Ä–ø–∏–º–æ
  else if (cpa > 80000)       score -= 2;          // –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ
  // 60‚Äì80 k ‚Äî 0 –±–∞–ª–ª–æ–≤

  /* === 3. –ë–æ–Ω—É—Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (0/1 –±–∞–ª–ª) === */
  if (gameState.attempts === 1) score += 1;

  /* === 4. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1‚Äì10 === */
  score = Math.round(score);                       // –¥–µ–ª–∞–µ–º —Ü–µ–ª—ã–º
  return Math.max(1, Math.min(10, score));
}

function getEfficiencyText(score) {
    if (score >= 9) {
        return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω! –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.';
    } else if (score >= 7) {
        return '–•–æ—Ä–æ—à–∏–π –º–µ–¥–∏–∞–ø–ª–∞–Ω —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –æ–±–µ—Å–ø–µ—á–∞—Ç —Ö–æ—Ä–æ—à–∏–π –æ—Ö–≤–∞—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.';
    } else if (score >= 5) {
        return '–ü—Ä–∏–µ–º–ª–µ–º—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –º–µ–∂–¥—É –ø–ª–æ—â–∞–¥–∫–∞–º–∏.';
    } else {
        return '–ú–µ–¥–∏–∞–ø–ª–∞–Ω —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏ –≤—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.';
    }
}

function restartGame() {
    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    gameState = {
        currentStep: 'welcome',
        selectedPlatforms: new Set(),
        correctPlatforms: new Set([2, 4, 5, 7, 8]),
        attempts: 1,
        budgetData: [],
        totalBudget: 0,
        totalConversions: 0,
        totalReach: 0,
        isComplete: false,
        step1Complete: false,
        gameData: gameState.gameData
    };
    const feedbackSection = document.getElementById('feedback-section');
    const budgetWarning = document.getElementById('budget-warning');
    if (feedbackSection) feedbackSection.classList.add('hidden');
    if (budgetWarning) budgetWarning.classList.add('hidden');
    showScreen('welcome-screen');
}
